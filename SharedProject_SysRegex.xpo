Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: SysRegex выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysRegex
    PROPERTIES
      Name                #SysRegex
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #_Match
        #SysRegexMatch _Match(
        #    str     input
        #)
        #{
        #    System.Text.RegularExpressions.Match    matchObject;
        #    str                                     ret;
        #;
        #    new InteropPermission( InteropKind::ClrInterop).assert();
        #
        #    matchObject = regex.Match( input);
        #
        #    return new SysRegexMatch(matchObject);
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #/// Обертка для класса System.Text.RegularExpressions.Regex
        #/// </summary>
        #/// <remarks>
        #///
        #/// </remarks>
        #class SysRegex
        #{
        #    System.Text.RegularExpressions.Regex    regex;
        #    str                                     pattern;
        #}
      ENDSOURCE
      SOURCE #isMatch
        #// Есть ли вхождения паттерна в указанной строке
        #boolean isMatch(
        #    str input
        #)
        #{
        #;
        #    new InteropPermission( InteropKind::ClrInterop).assert();
        #
        #    return regex.IsMatch( input);
        #}
      ENDSOURCE
      SOURCE #MatchesArray
        #Array MatchesArray(
        #    str     input
        #)
        #{
        #    System.Text.RegularExpressions.MatchCollection  matchCollection;
        #    System.Text.RegularExpressions.Match            matchObject;
        #    Array                                           ret;
        #    int                                             i, matchCount;
        #;
        #    new InteropPermission( InteropKind::ClrInterop).assert();
        #
        #    matchCollection = regex.Matches( input);
        #    matchCount      = matchCollection.get_Count();
        #    ret             = new Array(Types::Class);
        #    for (i=1; i<=matchCount; i++)
        #    {
        #        matchObject = matchCollection.get_Item(i-1);
        #        ret.value( i, new SysRegexMatch( matchObject));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #MatchesList
        #List MatchesList(
        #    str     input
        #)
        #{
        #    System.Text.RegularExpressions.MatchCollection  matchCollection;
        #    System.Text.RegularExpressions.Match            matchObject;
        #    List                                            ret;
        #    int                                             i, matchCount;
        #;
        #    new InteropPermission( InteropKind::ClrInterop).assert();
        #
        #    matchCollection = regex.Matches( input);
        #    matchCount      = matchCollection.get_Count();
        #    ret             = new List(Types::Class);
        #    for (i=1; i<=matchCount; i++)
        #    {
        #        matchObject = matchCollection.get_Item(i-1);
        #        ret.addEnd( new SysRegexMatch( matchObject));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #MatchValue
        #// Получение первого вхождения паттерна в указанную строку
        #str MatchValue(
        #    str     input
        #)
        #{
        #    return this._Match( input).Value();
        #}
      ENDSOURCE
      SOURCE #new
        #void new( str _pattern)
        #{
        #;
        #    new InteropPermission( InteropKind::ClrInterop).assert();
        #
        #    regex   = new System.Text.RegularExpressions.Regex( _pattern);
        #    pattern = _pattern;
        #}
      ENDSOURCE
      SOURCE #pattern
        #str pattern()
        #{
        #    return pattern;
        #}
      ENDSOURCE
      SOURCE #Replace
        #// Замена всех случаев совпадения с паттерном в указанной строке
        #str Replace(
        #    str     input
        #  , str     replacement
        #)
        #{
        #    str ret;
        #;
        #    new InteropPermission( InteropKind::ClrInterop).assert();
        #
        #    ret = CLRInterop::getAnyTypeForObject( regex.Replace( input, replacement));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #construct
        #static SysRegex construct( str _pattern)
        #{
        #    return new SysRegex(_pattern);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysRegexMatch выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysRegexMatch
    PROPERTIES
      Name                #SysRegexMatch
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #/// <summary>
        #/// Обертка для класса System.Text.RegularExpressions.Match
        #/// </summary>
        #/// <remarks>
        #///
        #/// </remarks>
        #class SysRegexMatch
        #{
        #    System.Text.RegularExpressions.Match    _match;
        #
        #    // Match.get_Value
        #    str         value;
        #
        #    // Match.get_Groups в двух вариантах - массив и структура, кому как удобнее
        #    Array       groupsArray;
        #    Struct      groupsStruct;
        #    container   groupsContainer;
        #}
      ENDSOURCE
      SOURCE #GroupsArray
        #Array GroupsArray()
        #{
        #    return groupsArray;
        #}
      ENDSOURCE
      SOURCE #GroupsContainer
        #container GroupsContainer()
        #{
        #    return groupsContainer;
        #}
      ENDSOURCE
      SOURCE #GroupsStruct
        #Struct GroupsStruct()
        #{
        #    return groupsStruct;
        #}
      ENDSOURCE
      SOURCE #new
        #void new( System.Text.RegularExpressions.Match __match)
        #{
        #    System.Text.RegularExpressions.GroupCollection  groupsCLR;
        #    System.Text.RegularExpressions.Group            groupCLR;
        #    int                                             i;
        #    str                                             groupValue;
        #;
        #    _match  = __match;
        #
        #    new InteropPermission( InteropKind::ClrInterop).assert();
        #
        #    value           = _match.get_Value();
        #
        #    groupsCLR       = _match.get_Groups();
        #
        #    groupsArray     = new Array(Types::String);
        #    groupsStruct    = new Struct();
        #    groupsContainer = connull();
        #
        #    for (i=0; i<CLRInterop::getAnyTypeForObject(groupsCLR.get_Count()); i++)
        #    {
        #        groupCLR    = groupsCLR.get_Item(i);
        #        groupValue  = CLRInterop::getAnyTypeForObject(groupCLR.get_Value());
        #
        #        if (i)
        #        {
        #            groupsArray.value( i, groupValue);
        #            groupsContainer += groupValue;
        #        }
        #        groupsStruct.add(
        #            CLRInterop::getAnyTypeForObject(groupCLR.get_Name())
        #          , groupValue
        #        );
        #    }
        #}
      ENDSOURCE
      SOURCE #Value
        #str Value()
        #{
        #    return value;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysRegexTest выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysRegexTest
    PROPERTIES
      Name                #SysRegexTest
      Extends             #SysTestCase
      RunOn               #Server
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #class SysRegexTest extends SysTestCase
        #{
        #    SysRegex    regex;
        #}
      ENDSOURCE
      SOURCE #testIsMatch
        #void testIsMatch()
        #{
        #;
        #    this.assertTrue( SysRegex::construct(@"=(.+)!R(\d+)C(\d+)").isMatch( "=Sheet!R1C1"));
        #    this.assertFalse( SysRegex::construct(@"=(.+)!R(\d+)C(\d+)").isMatch( "=Sheet!R1"));
        #}
      ENDSOURCE
      SOURCE #testMatchesArray
        #void testMatchesArray()
        #{
        #    Array           matchArray;
        #    int             i;
        #    SysRegexMatch   regexMatch;
        #;
        #    // Список вхождений сочетаний символов без пробела
        #    matchArray  = SysRegex::construct("(\\S+)").MatchesArray("a bb  c 1 0");
        #    this.assertEquals( 5, matchArray.lastIndex());
        #
        #    for (i=1; i<=matchArray.lastIndex(); i++)
        #    {
        #        regexMatch  = matchArray.value(i);
        #        regexMatch.Value();
        #        regexMatch.GroupsArray().value(1);
        #    }
        #
        #    // Список вхождений сочетаний пробелов
        #    matchArray  = SysRegex::construct("(\\s+)").MatchesArray("a bb  c 1 0");
        #    this.assertEquals( 4, matchArray.lastIndex());
        #
        #    for (i=1; i<=matchArray.lastIndex(); i++)
        #    {
        #        regexMatch  = matchArray.value(i);
        #        regexMatch.Value();
        #        regexMatch.GroupsArray().value(1);
        #    }
        #}
      ENDSOURCE
      SOURCE #testMatchesList
        #void testMatchesList()
        #{
        #    List            matchList;
        #    Enumerator      enumerator;
        #    SysRegexMatch   regexMatch;
        #;
        #    // Список вхождений сочетаний символов без пробела
        #    matchList  = SysRegex::construct("(\\S+)").MatchesList("a bb  c 1 0");
        #    this.assertEquals( 5, matchList.elements());
        #
        #    enumerator  = matchList.getEnumerator();
        #    while (enumerator.moveNext())
        #    {
        #        regexMatch  = enumerator.current();
        #        regexMatch.Value();
        #        regexMatch.GroupsArray().value(1);
        #    }
        #
        #    // Список вхождений сочетаний пробелов
        #    matchList  = SysRegex::construct("(\\s+)").MatchesList("a bb  c 1 0");
        #    this.assertEquals( 4, matchList.elements());
        #
        #    enumerator  = matchList.getEnumerator();
        #    while (enumerator.moveNext())
        #    {
        #        regexMatch  = enumerator.current();
        #        regexMatch.Value();
        #        regexMatch.GroupsArray().value(1);
        #    }
        #}
      ENDSOURCE
      SOURCE #testMatchValue
        #void testMatchValue()
        #{
        #;
        #    this.assertEquals( "=Sheet!R1C1", SysRegex::construct(@"=(.+)!R(\d+)C(\d+)").MatchValue( "=Sheet!R1C1"));
        #    this.assertEquals( "=Sheet!R1C1", SysRegex::construct(@"=(.+)!R(\d+)C(\d+)").MatchValue( "=Sheet!R1C1:R2C2"));
        #}
      ENDSOURCE
      SOURCE #testReplace
        #void testReplace()
        #{
        #    tempStr patt = @"=(.+)!R(\d+)C(\d+)",
        #            text = "=Sheet!R1C2";
        #;
        #    regex = SysRegex::construct(patt);
        #
        #    this.assertEquals( "Sheet", regex.Replace(text, "$1"));
        #    this.assertEquals( "1",     regex.Replace(text, "$2"));
        #    this.assertEquals( "2",     regex.Replace(text, "$3"));
        #
        #
        #    this.assertEquals( "Sheet",         SysRegex::construct(@"=(.+)!R(\d+)C(\d+)")  .Replace( "=Sheet!R1C1", "$1"));
        #    this.assertEquals( "SheetC1",       SysRegex::construct(@"=(.+)!R(\d+)")        .Replace( "=Sheet!R1C1", "$1"));
        #    this.assertEquals( "=Sheet!R1C1",   SysRegex::construct(@"=(.+)!R(\d+)C(\d+)")  .Replace( "=Sheet!R1C1", "=$1!R$2C$3"));
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysRegexMatchTest выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysRegexMatchTest
    PROPERTIES
      Name                #SysRegexMatchTest
      Extends             #SysTestCase
      RunOn               #Server
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #class SysRegexMatchTest extends SysTestCase
        #{
        #    SysRegexMatch   matchObject;
        #}
      ENDSOURCE
      SOURCE #testGroupsArray
        #void testGroupsArray()
        #{
        #    Array   arr;
        #;
        #    matchObject = SysRegex::construct(@"=(.+)!R(\d+)C(\d+)")._Match( "=Sheet!R10C20");
        #    arr         = matchObject.GroupsArray();
        #
        #    this.assertEquals( "Sheet", arr.value(1));
        #    this.assertEquals( "10", arr.value(2));
        #    this.assertEquals( "20", arr.value(3));
        #}
      ENDSOURCE
      SOURCE #testGroupsContainer
        #void testGroupsContainer()
        #{
        #;
        #    matchObject = SysRegex::construct(@"=(.+)!R(\d+)C(\d+)")._Match( "=Sheet!R10C20");
        #    this.assertEquals( ["Sheet","10","20"], matchObject.GroupsContainer());
        #}
      ENDSOURCE
      SOURCE #testGroupsStruct
        #void testGroupsStruct()
        #{
        #    Struct   s;
        #;
        #    matchObject = SysRegex::construct(@"=(.+)!R(\d+)C(\d+)")._Match( "=Sheet!R10C20");
        #    s           = matchObject.GroupsStruct();
        #
        #    this.assertEquals( "=Sheet!R10C20", s.value("0"));
        #    this.assertEquals( "Sheet",         s.value("1"));
        #    this.assertEquals( "10",            s.value("2"));
        #    this.assertEquals( "20",            s.value("3"));
        #}
      ENDSOURCE
      SOURCE #testValue
        #void testValue()
        #{
        #;
        #    matchObject = SysRegex::construct(@"=(.+)!R(\d+)C(\d+)")._Match( "=Sheet!R1C1");
        #    this.assertEquals( "=Sheet!R1C1", matchObject.Value());
        #
        #    matchObject = SysRegex::construct(@"=(.+)!R(\d+)C(\d+)")._Match( "=Sheet!R1C1:R2C2");
        #    this.assertEquals( "=Sheet!R1C1", matchObject.Value());
        #
        #    matchObject = SysRegex::construct(@"=(.+)!R(\d+)C(\d+)")._Match( "=Sheet!R1");
        #    this.assertEquals( "", matchObject.Value());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics AX Project : SysRegex unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #SysRegex
   SHARED
  PROPERTIES
    Name                #SysRegex
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41905
        NODETYPE 329
        NAME #SysRegex
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41909
        NODETYPE 329
        NAME #SysRegexMatch
      ENDNODE
      ENDGROUP
      
    GROUP #Test
      PROPERTIES
        Name                #Test
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41907
        NODETYPE 329
        NAME #SysRegexTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41910
        NODETYPE 329
        NAME #SysRegexMatchTest
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
